#!/bin/sh
# -*- python -*-
#
# Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
# Spack Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (Apache-2.0 OR MIT)

# This file is bilingual. The following shell code finds our preferred python.
# Following line is a shell no-op, and starts a multi-line Python comment.
# See https://stackoverflow.com/a/47886254
""":"
# prefer SPACK_PYTHON environment variable, python3, python, then python2
#
# We will then include all executables found by whereis for these names
# as fallbacks.
SPACK_PREFERRED_PYTHONS="python3 python python2 /usr/libexec/platform-python"
SPACK_PYTHONS_TO_CHECK="${SPACK_PYTHON:-} ${SPACK_PREFERRED_PYTHONS}"
# Collect the fallbacks with whereis
for cmd in "${SPACK_PYTHON:-}" ${SPACK_PREFERRED_PYTHONS}; do
    for path in $(whereis $cmd 2>/dev/null); do
        if test "$path" != "$cmd:" -a -f "$path" -a -x "$path"; then
            SPACK_PYTHONS_TO_CHECK="$SPACK_PYTHONS_TO_CHECK $path"
        fi
    done
done
# Check each possibility.
for cmd in $SPACK_PYTHONS_TO_CHECK; do
    if command -v > /dev/null "$cmd"; then
        # Skip it if it was installed by Spack itself (
        # sys.prefix == sys.base_prefix "._view" is the parent directory of
        # sys.prefix)
        IS_NOT_FROM_SPACK=$($cmd -c "import sys, os.path; print(sys.prefix != sys.base_prefix or os.path.basename(os.path.dirname(sys.prefix)) != '._view')" 2>/dev/null)
        if test True = "$IS_NOT_FROM_SPACK"; then
            export SPACK_PYTHON="$(command -v "$cmd")"
            exec "${SPACK_PYTHON}" "$0" "$@"
        fi
    fi
done

echo "==> Error: spack could not find a python interpreter!" >&2
exit 1
":"""
# Line above is a shell no-op, and ends a python multi-line comment.
# The code above runs this file with our preferred python interpreter.

from __future__ import print_function

import os
import os.path
import sys

min_python3 = (3, 6)

if sys.version_info[:2] < min_python3:
    v_info = sys.version_info[:3]
    msg = "Spack requires Python %d.%d or higher " % min_python3
    msg += "You are running spack with Python %d.%d.%d." % v_info
    sys.exit(msg)

# Find spack's location and its prefix.
spack_file = os.path.realpath(os.path.expanduser(__file__))
spack_prefix = os.path.dirname(os.path.dirname(spack_file))

# Allow spack libs to be imported in our scripts
spack_lib_path = os.path.join(spack_prefix, "lib", "spack")
sys.path.insert(0, spack_lib_path)

from spack_installable.main import main  # noqa: E402

# Once we've set up the system path, run the spack main method
if __name__ == "__main__":
    sys.exit(main())
